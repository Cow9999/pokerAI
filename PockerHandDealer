import java.util.*;

// Main class for the poker hand dealer
public class PockerHandDealer { 
  
      private static void playGame(Scanner scanner, int numPlayers) {
        Deck deck = new Deck();
        deck.shuffle();
        System.out.println("");

        List<Player> players = new ArrayList<>();
        for (int i = 1; i <= numPlayers; i++) {
            Player player = new Player(1000, false);
            player.setHand(deck.dealHand(2));
            player.bet(100);
            System.out.println("Player " + i + "'s Chips: " + player.getChips());
            System.out.println("Player " + i + "'s Hand: " + player.getHand());
            players.add(player);
        }

        List<Card> burnCards = new ArrayList<>();
        List<Card> communityCards = new ArrayList<>();

        // Burn a card then deal the flop
        burnCards.add(deck.dealCard()); // Assuming dealCard() method deals a single card
        communityCards.addAll(deck.dealHand(3));
        burnCards.add(deck.dealCard()); // Burn another card before the turn
        communityCards.addAll(deck.dealHand(1)); // Turn
        burnCards.add(deck.dealCard()); // Burn another card before the river
        communityCards.addAll(deck.dealHand(1)); // River

        System.out.println("Burn Cards: " + burnCards);
        System.out.println("Community Cards: " + communityCards);

        // Betting rounds for each player
        for (int round = 1; round <= 4; round++) {
            for (Player player : players) {
                if (!player.isFolded()) {
                    System.out.println("Player " + (players.indexOf(player) + 1) + ", what is your action?");
                    player.bettingRound(scanner, communityCards);
                }
            }
            // Deal additional community cards after first round
            if (round == 1) {
                communityCards.addAll(deck.dealHand(3)); // Flop
            } else if (round == 2) {
                communityCards.addAll(deck.dealHand(1)); // Turn
            } else if (round == 3) {
                communityCards.addAll(deck.dealHand(1)); // River
            }
        }

        // Determine winner
        Player.checkWin(players, communityCards);
    }
        //if (handType1.equals(handType2) && handRank1 == handRank2) {
          //System.out.println(SamHandEval.determineHigherHand(player1.getHand(), player2.getHand()));
      //}
      
      private static void replay(Scanner scanner, int numPlayers) {
        while (true) {
            System.out.println("Do you want to play another round? (yes/no)");
            String response = scanner.nextLine();

            if (response.equalsIgnoreCase("yes")) {
                Player.setPot(0); // Reset the pot
                playGame(scanner, numPlayers); // Replay the game
            } else {
                System.out.println("Thank you for playing!");
                break; // Exit the loop, thus ending the game
            }
        }
    }
  
      public static void main(String[] args) {
        try (Scanner scanner = new Scanner(System.in)) {
            System.out.println("How Many players would you like to play with");
            int numPlayers = Integer.parseInt(scanner.nextLine());
            while (numPlayers < 2 || numPlayers > 10) {
                System.out.println("Invalid number. Enter a number between 2 and 10:");
                numPlayers = Integer.parseInt(scanner.nextLine());
            }
            playGame(scanner, numPlayers);
            replay(scanner, numPlayers);
        } catch (NumberFormatException e) {
            System.out.println("Invalid input. Please enter a number.");
        }
  }
}

