import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import javax.swing.JLabel;


public class Player {
        public static final int List = 0;
        public static final int Player = 0;
        Scanner scanner = new Scanner(System.in);
        List<Card> hand = new ArrayList<>();
        public static boolean[] folds = new boolean[11];
        public boolean folded;
        public int chips;
        public static int pot;
        private JLabel infoLabel;

        // Player constructor
        public Player(int initialChips, boolean folded) {
        infoLabel = new JLabel();
        this.chips = initialChips;
        this.folded = false;
        this.hand = new ArrayList<>();
        }


    // ... other existing methods ...
        public void setInfoText(String text) {
        infoLabel.setText(text);
        }
        public static void setPot(int newPot){
            pot=newPot;
        }

        // Sets the player's hand
        public void setHand(List<Card> hand) {
            this.hand = hand;
        }

        // Gets the player's hand
        public List<Card> getHand() {
            return hand;
        }
        public String getCard(int x) {
            return hand.get(x).toString();
        }

        // Gets the player's chip count
        public int getChips() {
            return chips;
        }

        // Player bets a certain amount of chips

        // Player wins a certain amount of chips
        public void win() {

              chips += pot;
        }
        public void tie(){
            chips= chips + (pot/2);
        }
        public void setFold(int numPlayers){
            for (int i = 0; i<(numPlayers+1); i++){
                folds[i] = false;
              }
        }
        public static boolean getFold(int numPlayers){
            return folds[numPlayers];
        }
        public void bet(int amount) {
            chips -= amount;
            pot+=amount;
            infoLabel.setText("You bet " + amount + " chips. Remaining chips: " + chips);
        }
    
        public void bettingRound(char keyChar) {
            switch (Character.toUpperCase(keyChar)) {
                case 'B':
                    // Bet logic
                    // You'll need to implement a way to input the bet amount
                    bet(10); // Example bet amount
                    break;
                case 'C':
                    // Check logic
                    infoLabel.setText("You checked.");
                    break;
                case 'F':
                    // Fold logic
                    infoLabel.setText("You folded.");
                    break;
                default:
                    infoLabel.setText("Invalid key. Press B, C, or F.");
                    break;
            }
        }
    public static List<Player> checkWin(List<Player> players, List<Card> communityCards) {
        double highestRank = 0;
        int totalPot = pot;
        List<Player> winners = new ArrayList<>();
    
        // Evaluate hands and find the highest hand rank
        for (int i = 0; i < players.size(); i++) {
            Player player = players.get(i);
            if (!player.getFold(i)) {
                double handRank = PokerHandEvaluator.evaluateHand(player.getHand(), communityCards);
                if (handRank > highestRank) {
                    highestRank = handRank;
                    winners.clear();
                    winners.add(player);
                } else if (handRank == highestRank) {
                    winners.add(player);
                }
            }
        }
            iftie.resolveTie(winners, communityCards);
    
        // Calculate winnings and update each winner's chips
        int winnings = totalPot / winners.size();
        for (Player winner : winners) {
            int winnerIndex = players.indexOf(winner) + 1; // +1 to convert from 0-based index to 1-based player number
            winner.chips += winnings;
            System.out.println("Player " + winnerIndex + " wins " + winnings + " chips!");
        }
    
        // Display each player's chip count
        for (int i = 0; i < players.size(); i++) {
            System.out.println("Player " + (i + 1) + " has " + players.get(i).chips + " chips.");
        }
    
        return winners;
    }
    }
