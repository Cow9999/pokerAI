import java.util.*;
public  class PokerHandEvaluator {

    public static int evaluateHand(List<Card> hand, List<Card> deal) {
  
      if (isRoyalFlush(hand, deal)) return 9;
  
      else if (isStraightFlush(hand, deal)) return 8;
  
      else if (isFourOfAKind(hand, deal)) return 7; 
  
      else if (isFullHouse(hand, deal)) return 6;
  
      else if (isFlush(hand, deal)) return 5;
  
      else if (isStraight(hand, deal)) return 4; 
  
      else if (isThreeOfAKind(hand, deal)) return 3;
  
      else if (isTwoPair(hand, deal)) return 2;
  
      else if (isOnePair(hand, deal)) return 1;
      else return 0; // High card
  
    }
    public static String getHandName(List<Card> hand, List<Card> deal) {
      if (isRoyalFlush(hand, deal)) return "Royal Flush";
      else if (isStraightFlush(hand, deal)) return "Straight Flush";
      else if (isFourOfAKind(hand, deal)) return "Four of a Kind";
      else if (isFullHouse(hand, deal)) return "Full House";
      else if (isFlush(hand, deal)) return "Flush";
      else if (isStraight(hand, deal)) return "Straight";
      else if (isThreeOfAKind(hand, deal)) return "Three of a Kind";
      else if (isTwoPair(hand, deal)) return "Two Pair";
      else if (isOnePair(hand, deal)) return "One Pair";
      else return "High Card";
  }
    
  
      public static boolean isOnePair(List<Card> playerHand, List<Card> communityCards) {
        List<Card> combinedHand = new ArrayList<>(playerHand);
        combinedHand.addAll(communityCards);

        Map<Integer, Integer> rankCounts = new HashMap<>();
        for (Card card : combinedHand) {
            rankCounts.put(card.getRank(), rankCounts.getOrDefault(card.getRank(), 0) + 1);
        }

        boolean foundOnePair = false;
        for (int count : rankCounts.values()) {
            if (count == 2) {
                if (foundOnePair) {
                    // Found a second pair, so it's not "one pair"
                    return false;
                }
                foundOnePair = true;
            } else if (count > 2) {
                // More than two of the same rank, so it's not "one pair"
                return false;
            }
        }

        return foundOnePair;
      }
  
    public static boolean isTwoPair(List<Card> playerHand, List<Card> communityCards) {
      List<Card> combinedHand = new ArrayList<>(playerHand);
      combinedHand.addAll(communityCards);
  
      Map<Integer, Integer> rankCounts = new HashMap<>();
      for (Card card : combinedHand) {
          rankCounts.put(card.getRank(), rankCounts.getOrDefault(card.getRank(), 0) + 1);
      }
  
      int pairsFound = 0;
      for (int count : rankCounts.values()) {
          if (count == 2) {
              pairsFound++;
          }
      }
  
      return pairsFound == 2;
  }
  
  
  
  public static boolean isThreeOfAKind(List<Card> playerHand, List<Card> communityCards) {
    List<Card> combinedHand = new ArrayList<>(playerHand);
    combinedHand.addAll(communityCards);

    Map<Integer, Integer> rankCounts = new HashMap<>();
    for (Card card : combinedHand) {
        rankCounts.put(card.getRank(), rankCounts.getOrDefault(card.getRank(), 0) + 1);
    }

    for (int count : rankCounts.values()) {
        if (count == 3) {
            // Found exactly three cards of the same rank
            return true;
        }
    }

    return false;
}

  
    public static boolean isStraight(List<Card> playerHand, List<Card> communityCards) {
      List<Card> combinedHand = new ArrayList<>(playerHand);
      combinedHand.addAll(communityCards);
  
      // Use a TreeSet to sort and eliminate duplicates
      Set<Integer> sortedRanks = new TreeSet<>();
      for (Card card : combinedHand) {
          // Add rank, converting Ace (rank 14) to 1 for low straight (A-2-3-4-5)
          int rank = card.getRank() == 14 ? 1 : card.getRank();
          sortedRanks.add(rank);
      }
  
      // Check for straight
      List<Integer> ranks = new ArrayList<>(sortedRanks);
      for (int i = 0; i < ranks.size() - 4; i++) {
          if (ranks.get(i) + 4 == ranks.get(i + 4)) {
              return true;
          }
      }
  
      // Check for high straight with Ace
      if (sortedRanks.contains(14) && sortedRanks.contains(10) && sortedRanks.contains(11)
          && sortedRanks.contains(12) && sortedRanks.contains(13)) {
          return true;
      }
  
      return false;
  }

    public static boolean isFlush(List<Card> playerHand, List<Card> communityCards) {
      List<Card> combinedHand = new ArrayList<>(playerHand);
      combinedHand.addAll(communityCards);
  
      // Count occurrences of each suit
      Map<String, Integer> suitCounts = new HashMap<>();
      for (Card card : combinedHand) {
          suitCounts.put(card.getSuit(), suitCounts.getOrDefault(card.getSuit(), 0) + 1);
      }
  
      // Check if any suit count is 5 or more
      for (int count : suitCounts.values()) {
          if (count >= 5) {
              return true;
          }
      }
  
      return false;
  }
  
  public static boolean isFullHouse(List<Card> playerHand, List<Card> communityCards) {
    List<Card> combinedHand = new ArrayList<>(playerHand);
    combinedHand.addAll(communityCards);

    Map<Integer, Integer> rankCounts = new HashMap<>();
    for (Card card : combinedHand) {
        rankCounts.put(card.getRank(), rankCounts.getOrDefault(card.getRank(), 0) + 1);
    }

    boolean hasThreeOfAKind = false;
    boolean hasAPair = false;

    for (int count : rankCounts.values()) {
        if (count == 3) {
            hasThreeOfAKind = true;
        } else if (count == 2) {
            hasAPair = true;
        }
    }

    return hasThreeOfAKind && hasAPair;
}

  
    public static boolean isFourOfAKind(List<Card> playerHand, List<Card> communityCards) {
      List<Card> combinedHand = new ArrayList<>(playerHand);
      combinedHand.addAll(communityCards);
      
      Map<Integer, Integer> rankCounts = new HashMap<>();
      
      // Count the occurrences of each rank
      for (Card card : combinedHand) {
          rankCounts.put(card.getRank(), rankCounts.getOrDefault(card.getRank(), 0) + 1);
      }
      
      // Check if any rank count is exactly 4
      for (int count : rankCounts.values()) {
          if (count == 4) {
              return true;
          }
      }
      
      return false;
  }
  
    private static boolean isStraightFlush(List<Card> playerHand, List<Card> communityCards) {
      List<Card> sortedHand = sortHand.sortHandBySuitAndRank(playerHand, communityCards);
  
      for (int i = 0; i < sortedHand.size() - 4; i++) {
          if (sortedHand.get(i).getSuit().equals(sortedHand.get(i + 4).getSuit()) &&
              sortedHand.get(i).getRank() + 4 == sortedHand.get(i + 4).getRank()) {
              return true;
          }
      }
      return false;
  }
  
    private static boolean isRoyalFlush(List<Card> hand, List<Card> deal) {
      List<Card> combinedHand = sortHand.sortHandForRoyalFlush(hand, deal);

    // Check for Royal Flush
    if (combinedHand.size() < 5) {
        return false; // Not enough cards for a royal flush
    }

    for (int i = 0; i <= combinedHand.size() - 5; i++) {
        // Check if five consecutive cards form a royal flush
        if (combinedHand.get(i).getRank() == 10 &&
            combinedHand.get(i + 1).getRank() == 11 && // Jack
            combinedHand.get(i + 2).getRank() == 12 && // Queen
            combinedHand.get(i + 3).getRank() == 13 && // King
            combinedHand.get(i + 4).getRank() == 14 && // Ace
            combinedHand.get(i).getSuit().equals(combinedHand.get(i + 1).getSuit()) &&
            combinedHand.get(i).getSuit().equals(combinedHand.get(i + 2).getSuit()) &&
            combinedHand.get(i).getSuit().equals(combinedHand.get(i + 3).getSuit()) &&
            combinedHand.get(i).getSuit().equals(combinedHand.get(i + 4).getSuit())) {
            return true;
        }
    }
    return false;
  
    }
    

    public class sortHand{
      public static List<Card> sortHandForRoyalFlush(List<Card> playerHand, List<Card> communityCards) {
          List<Card> combinedHand = new ArrayList<>(playerHand);
          combinedHand.addAll(communityCards);
  
          Collections.sort(combinedHand, new Comparator<Card>() {
              @Override
              public int compare(Card c1, Card c2) {
                  // First, sort by suit
                  int suitCompare = c1.getSuit().compareTo(c2.getSuit());
                  if (suitCompare != 0) {
                      return suitCompare;
                  }
                  // If suits are the same, then sort by rank
                  return c1.getRank().compareTo(c2.getRank());
              }
          });
  
          return combinedHand;
      }
      public static List<Card> sortHandBySuitAndRank(List<Card> playerHand, List<Card> communityCards) {
        List<Card> combinedHand = new ArrayList<>(playerHand);
        combinedHand.addAll(communityCards);
    
        Collections.sort(combinedHand, new Comparator<Card>() {
            @Override
            public int compare(Card c1, Card c2) {
                // First, sort by suit
                int suitCompare = c1.getSuit().compareTo(c2.getSuit());
                if (suitCompare != 0) {
                    return suitCompare;
                }
                // If suits are the same, then sort by rank
                return c1.getRank().compareTo(c2.getRank());
            }
        });
    
        return combinedHand;
      }
  
  }  
  }
  
